Для первой:
def foo2(x):
    x * 10 + 42

print(dis.dis(foo2))
это выдало следующее:
11           0 LOAD_FAST                0 (x)
              3 LOAD_CONST               1 (10)
              6 BINARY_MULTIPLY     
              7 LOAD_CONST               2 (42)
             10 BINARY_ADD          
             11 POP_TOP             
             12 LOAD_CONST               0 (None)
             15 RETURN_VALUE        
None

Process finished with exit code 0
Соответственно: 
LOAD_FAST - грузит x 
LOAD_CONST - грузит константу (10)
BINARY_MULTIPLY - умножение
LOAD_CONST - грузит константу (42)
BINARY_ADD - сложение
сходится; операнды видимо подгружаются после того с чем проводятся операции (логично)


Для второй:
5 - создаем r и записываем туда 1
6 - if n > 1
7 - r *= n
8 - n -= 1
здесь ступор - так как jump_absolute вроде должен появляться из-за цикла, но цикла нет
9 - return r

в целом мне в голову приходят мысли о функции подсчета факториала (начиная с n если это n!, то есть 5! = 1 * 5 * 4 * 3 * 2)
Вот только это была бы она, если бы тут был цикл, на который к тому же намекает jump_absolute намекает на это
